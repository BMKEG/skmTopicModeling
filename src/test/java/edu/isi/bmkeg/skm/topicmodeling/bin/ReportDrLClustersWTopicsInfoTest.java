package edu.isi.bmkeg.skm.topicmodeling.bin;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import edu.isi.bmkeg.utils.springContext.BmkegProperties;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/Testcontext-bmkeg.xml","/testApplicationContext-controllerVpdmfPopulated.xml"})
@DirtiesContext(classMode=ClassMode.AFTER_EACH_TEST_METHOD) // Forcing the initialization of the ApplicationContext after each test.
															// This is needed to provide a clean dao instance and a blank db which is
															// produced during the application context initialization.
/**
 * These unit tests depend on a populated vpdmf-mysql archive generated by unit test 
 * AA_CreateCitationsTestArchiveTest.java and hence should be executed after it. 
 *
 */
public class ReportDrLClustersWTopicsInfoTest {

	@Autowired
	private BmkegProperties prop;

	@Autowired
	ApplicationContext ctx;

	File clusterTopicsFile, clusterDocsFile;
	
	@Before
	public void setUp() throws Exception {
	
		clusterTopicsFile = ctx.getResource("classpath:/edu/isi/bmkeg/skm/topicmodeling/clusterTopics.txt").getFile();
		clusterDocsFile = ctx.getResource("classpath:/edu/isi/bmkeg/skm/topicmodeling/clusterDocsWTopics.txt").getFile();


	}

	@After
	public void tearDown() throws Exception {

	}
	
	@Test
	public void testToFile() throws Exception {
		
		String outputFn = "target/reportData.txt";
		
		File file = new File(outputFn);
		
		System.out.println("Output file: " + file.getAbsolutePath());
		if (file.exists()) {
			
			System.out.println("Output file already exists - deleting it");
			file.delete();
			
		}

		String[] args = new String[] { 
				"-clusterTopics", clusterTopicsFile.getAbsolutePath(), 
				"-clusterDocs", clusterDocsFile.getAbsolutePath(), 
				"-f", outputFn, 
				"-l", prop.getDbUser(), 
				"-p", prop.getDbPassword(), 
				"-db", prop.getDbUrl(),
				};

		ReportDrLClustersWTopicsInfo.main(args);

		Assert.assertTrue(file.exists());
		
		BufferedReader reader =  new BufferedReader(new FileReader(file));
		
		try {

			String line = reader.readLine();
			while (line != null) {			

				System.out.println(line);
				
				line = reader.readLine();
			}
			
		} finally {
			reader.close();
		}
	
		
	}

	@Test
	public void testToStdOut() throws Exception {
		
		String[] args = new String[] { 
				"-clusterTopics", clusterTopicsFile.getAbsolutePath(), 
				"-clusterDocs", clusterDocsFile.getAbsolutePath(),
				"-wiki",
				"-l", prop.getDbUser(), 
				"-p", prop.getDbPassword(), 
				"-db", prop.getDbUrl(),
				};

		ReportDrLClustersWTopicsInfo.main(args);

	}

}
